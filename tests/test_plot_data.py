from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os
import sys
import unittest

import matplotlib.pyplot as plt
import matplotlib.testing.compare

import numpy as np
import scipy.stats as sts
from sklearn.gaussian_process import GaussianProcessRegressor as gpr

from ibis import plots

class TestPlotData(unittest.TestCase):
   def setUp(self):
        self.X = np.array([[0.46123442, 0.91202244, 0.92876321],
                           [0.06385122, 0.08942266, 0.44186744],
                           [0.68961511, 0.52403073, 0.56833564],
                           [0.85123686, 0.77737199, 0.52990221],
                           [0.28834075, 0.01743994, 0.36242905],
                           [0.54587868, 0.41817851, 0.72421346],
                           [0.25357849, 0.22729639, 0.5369119],
                           [0.15648554, 0.3817992, 0.08481071],
                           [0.06034016, 0.89202591, 0.68325111],
                           [0.47304368, 0.85874444, 0.28670653],
                           [0.13013734, 0.68430436, 0.38675013],
                           [0.42515756, 0.90183769, 0.834895],
                           [0.43438549, 0.56288698, 0.65607153],
                           [0.39890529, 0.66302321, 0.72165207],
                           [0.72526413, 0.30656396, 0.98994899],
                           [0.50290481, 0.02484515, 0.05371448],
                           [0.24154745, 0.19699787, 0.08694096],
                           [0.86792345, 0.73439781, 0.94549644],
                           [0.66545947, 0.05688571, 0.34595029],
                           [0.95990758, 0.05884415, 0.46791467],
                           [0.86474237, 0.79569641, 0.85598485],
                           [0.63037856, 0.10142019, 0.61359389],
                           [0.1390893, 0.1522652, 0.62634887],
                           [0.33668492, 0.36119699, 0.58089201],
                           [0.29715877, 0.73680818, 0.20449131],
                           [0.55683808, 0.49606268, 0.30689581],
                           [0.61112437, 0.45046932, 0.72687226],
                           [0.82401322, 0.0999469, 0.09535599],
                           [0.76943412, 0.13181057, 0.81715459],
                           [0.6067913, 0.52855681, 0.73084772],
                           [0.77817408, 0.23410479, 0.77393847],
                           [0.31784351, 0.55372617, 0.71227582],
                           [0.46758069, 0.35570418, 0.31543622],
                           [0.06989688, 0.82159477, 0.3253991],
                           [0.30579717, 0.56461504, 0.07109011],
                           [0.50532271, 0.57142318, 0.59031356],
                           [0.11022146, 0.1806901, 0.20185294],
                           [0.37793607, 0.45846717, 0.40057469],
                           [0.891715, 0.51578042, 0.05885039],
                           [0.5729882, 0.29217043, 0.12501581],
                           [0.90126537, 0.76969839, 0.52675768],
                           [0.00216229, 0.14707118, 0.9368788],
                           [0.16484123, 0.55441898, 0.83753256],
                           [0.56469525, 0.38370204, 0.65722823],
                           [0.8687188, 0.66432443, 0.67008946],
                           [0.48001072, 0.50522088, 0.13284311],
                           [0.91704432, 0.99687862, 0.65933211],
                           [0.75265367, 0.11150535, 0.9612883],
                           [0.39109998, 0.23905451, 0.6992524],
                           [0.00245559, 0.07515066, 0.7427796],
                           [0.43617553, 0.81086171, 0.76694599],
                           [0.05498618, 0.68288433, 0.05098977],
                           [0.92852732, 0.92922038, 0.07499123],
                           [0.3563414, 0.0369639, 0.80971561],
                           [0.31104242, 0.26773013, 0.24337643],
                           [0.40656828, 0.84523629, 0.92413601],
                           [0.2621117, 0.13541767, 0.13898699],
                           [0.78952943, 0.27979129, 0.36594954],
                           [0.96398771, 0.39427822, 0.42041622],
                           [0.06170219, 0.39562485, 0.0390669],
                           [0.07484891, 0.44352503, 0.86574964],
                           [0.02119805, 0.08114133, 0.66240878],
                           [0.62832535, 0.74553018, 0.33435648],
                           [0.27253955, 0.05851183, 0.9477553],
                           [0.17621574, 0.48891392, 0.08004835],
                           [0.05899438, 0.49678554, 0.39423793],
                           [0.13625638, 0.90123555, 0.99555211],
                           [0.82430987, 0.06799042, 0.98713305],
                           [0.23391724, 0.32835972, 0.11899672],
                           [0.26675385, 0.49923745, 0.5294856],
                           [0.50285101, 0.75814327, 0.30801608],
                           [0.97083411, 0.25323657, 0.91860817],
                           [0.50567205, 0.07012236, 0.12421462],
                           [0.58163984, 0.34303427, 0.36467924],
                           [0.62053834, 0.542813, 0.77542096],
                           [0.04564984, 0.57157144, 0.2524628],
                           [0.98461689, 0.06922946, 0.61206824],
                           [0.18133769, 0.85259098, 0.2208197],
                           [0.02360491, 0.58486804, 0.88898217],
                           [0.24356099, 0.78698977, 0.19156109],
                           [0.3374873, 0.3931525, 0.34168161],
                           [0.04891735, 0.06757889, 0.76139633],
                           [0.19553807, 0.02900628, 0.58441379],
                           [0.08725175, 0.47520548, 0.3877658],
                           [0.72472161, 0.462946, 0.39650086],
                           [0.2661204, 0.82420122, 0.6588341],
                           [0.69032023, 0.53098725, 0.39433453],
                           [0.11943751, 0.74554536, 0.87115827],
                           [0.18756975, 0.83759763, 0.44177224],
                           [0.21552329, 0.82555553, 0.85337084],
                           [0.59029845, 0.40985213, 0.86169482],
                           [0.22949626, 0.30654941, 0.28231961],
                           [0.17845353, 0.94908186, 0.56501311],
                           [0.91970551, 0.04106241, 0.11949207],
                           [0.7979433, 0.50880488, 0.81055288],
                           [0.81982103, 0.36466048, 0.13310552],
                           [0.37220176, 0.99673639, 0.39217999],
                           [0.71401306, 0.82261441, 0.79515913],
                           [0.11756912, 0.45101294, 0.76186856],
                           [0.93985828, 0.92252428, 0.12734155]])
        self.Y = np.stack([self.X.sum(axis=1) ** 2, np.sin(self.X.sum(axis=1))]).T
        self.input_names = ['input_A', 'input_B', 'input_C']
        self.output_names = ['output_A', 'output_B']
        self.seed = 20200221
        self.surrogate_model = gpr().fit(self.X,self.Y)


   def test_likelihood_plot(self):
      prior = sts.beta(1, 1).rvs(10000, random_state=self.seed)
      posterior = sts.beta(13, 7).rvs(10000, random_state=self.seed)
      fig, ax = plt.subplots(1, 1)
      
      prior_x_fiducial = np.array([0.01001254, 0.03001141, 0.05001028, 0.07000915, 0.09000802,
         0.11000689, 0.13000576, 0.15000463, 0.1700035 , 0.19000237,
         0.21000124, 0.23000011, 0.24999898, 0.26999785, 0.28999672,
         0.30999559, 0.32999446, 0.34999333, 0.3699922 , 0.38999107,
         0.40998994, 0.42998881, 0.44998768, 0.46998655, 0.48998542,
         0.50998429, 0.52998316, 0.54998203, 0.5699809 , 0.58997977,
         0.60997864, 0.62997751, 0.64997638, 0.66997525, 0.68997412,
         0.70997299, 0.72997186, 0.74997073, 0.7699696 , 0.78996847,
         0.80996734, 0.82996621, 0.84996508, 0.86996395, 0.88996282,
         0.90996169, 0.92996056, 0.94995943, 0.9699583 , 0.98995717])

      binned_prior_fiducial = np.array([1.05505961, 1.01505735, 0.91005142, 0.96505452, 0.93005255,
         1.13506413, 0.95005368, 0.84504774, 1.11006272, 0.93505283,
         0.94005311, 1.0300582 , 0.94005311, 1.00505678, 0.84504774,
         1.08506131, 0.95005368, 0.99505622, 1.07506074, 1.12006328,
         1.0000565 , 1.16006554, 1.13006385, 0.94005311, 0.94505339,
         1.04505905, 1.07006046, 0.99005594, 1.02505792, 0.98005537,
         0.98505565, 0.93005255, 1.06005989, 0.92005198, 0.9150517 ,
         1.03505848, 1.10006215, 1.0000565 , 1.07006046, 1.09006159,
         0.92005198, 1.01505735, 1.12006328, 1.09506187, 0.94005311,
         0.94505339, 1.01505735, 1.00505678, 0.84504774, 0.87504944])

      posterior_x_fiducial = np.array([0.28513885, 0.29839373, 0.31164861, 0.3249035 , 0.33815838,
         0.35141326, 0.36466815, 0.37792303, 0.39117792, 0.4044328 ,
         0.41768768, 0.43094257, 0.44419745, 0.45745233, 0.47070722,
         0.4839621 , 0.49721698, 0.51047187, 0.52372675, 0.53698163,
         0.55023652, 0.5634914 , 0.57674628, 0.59000117, 0.60325605,
         0.61651093, 0.62976582, 0.6430207 , 0.65627558, 0.66953047,
         0.68278535, 0.69604023, 0.70929512, 0.72255   , 0.73580488,
         0.74905977, 0.76231465, 0.77556953, 0.78882442, 0.8020793 ,
         0.81533419, 0.82858907, 0.84184395, 0.85509884, 0.86835372,
         0.8816086 , 0.89486349, 0.90811837, 0.92137325, 0.93462814])

      binned_posterior_fiducial = np.array([0.01508878, 0.02263317, 0.05281072, 0.03772195, 0.07544389,
         0.08298828, 0.2112429 , 0.23387607, 0.26405362, 0.23387607,
         0.41494141, 0.39230824, 0.59600675, 0.89778232, 0.87514915,
         1.16183594, 1.29009056, 1.62204369, 1.65222124, 1.90873048,
         2.20296166, 2.54245918, 2.96494497, 3.30444249, 2.98003375,
         3.30444249, 3.61376245, 3.75710584, 3.53077417, 3.97589313,
         3.58358489, 3.31953127, 3.53077417, 3.45533027, 2.98003375,
         2.57263673, 2.19541727, 2.22559483, 1.79556464, 1.51642224,
         1.02603694, 0.9807706 , 0.67899503, 0.52810725, 0.32440874,
         0.22633168, 0.18106534, 0.04526634, 0.03017756, 0.03017756])

      prior_x, binned_prior, posterior_x, binned_posterior = plots.likelihood_plot(ax, prior_points=prior, post_points=posterior, bins=50, conf_level=95)

      np.testing.assert_almost_equal(prior_x_fiducial, prior_x) 
      np.testing.assert_almost_equal(binned_prior_fiducial, binned_prior)
      np.testing.assert_almost_equal(posterior_x_fiducial, posterior_x)
      np.testing.assert_almost_equal(binned_posterior_fiducial, binned_posterior)

      points = np.linspace(0, 1, 10000)
      weights = sts.beta(13, 7).pdf(points)
      fig, ax = plt.subplots(1, 1)

      prior_x_fiducial = np.array([0.01, 0.03, 0.05, 0.07, 0.09, 0.11, 0.13, 0.15, 0.17, 0.19, 0.21,
         0.23, 0.25, 0.27, 0.29, 0.31, 0.33, 0.35, 0.37, 0.39, 0.41, 0.43,
         0.45, 0.47, 0.49, 0.51, 0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65,
         0.67, 0.69, 0.71, 0.73, 0.75, 0.77, 0.79, 0.81, 0.83, 0.85, 0.87,
         0.89, 0.91, 0.93, 0.95, 0.97, 0.99])

      binned_prior_fiducial = np.array([200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
         200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
         200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
         200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200])

      posterior_x_fiducial = np.array([0.01, 0.03, 0.05, 0.07, 0.09, 0.11, 0.13, 0.15, 0.17, 0.19, 0.21,
         0.23, 0.25, 0.27, 0.29, 0.31, 0.33, 0.35, 0.37, 0.39, 0.41, 0.43,
         0.45, 0.47, 0.49, 0.51, 0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65,
         0.67, 0.69, 0.71, 0.73, 0.75, 0.77, 0.79, 0.81, 0.83, 0.85, 0.87,
         0.89, 0.91, 0.93, 0.95, 0.97, 0.99])

      binned_posterior_fiducial = np.array([1.92518986e-14, 1.42949392e-10, 2.47516493e-08, 9.07990392e-07,
         1.41225341e-05, 1.27438765e-04, 7.89960256e-04, 3.72155181e-03,
         1.42206218e-02, 4.60677330e-02, 1.30549703e-01, 3.31160506e-01,
         7.65076851e-01, 1.63142995e+00, 3.24469539e+00, 6.06935285e+00,
         1.07496450e+01, 1.81262438e+01, 2.92304473e+01, 4.52467000e+01,
         6.74361767e+01, 9.70180841e+01, 1.35011133e+02, 1.82044858e+02,
         2.38158311e+02, 3.02610960e+02, 3.73736117e+02, 4.48869377e+02,
         5.24382254e+02, 5.95843493e+02, 6.58317277e+02, 7.06789281e+02,
         7.36689986e+02, 7.44462350e+02, 7.28101493e+02, 6.87581551e+02,
         6.25083549e+02, 5.44951575e+02, 4.53334789e+02, 3.57519455e+02,
         2.65014118e+02, 1.82514272e+02, 1.14927361e+02, 6.46682682e+01,
         3.14208903e+01, 1.24866551e+01, 3.69870834e+00, 6.83914470e-01,
         5.29867546e-02, 5.13486297e-04])
      
      prior_x, binned_prior, posterior_x, binned_posterior = plots.likelihood_plot(ax, prior_points=points, post_weights=weights, exp_value=13. / (13. + 7.), bins=50, conf_level=95,density=False)

      np.testing.assert_almost_equal(prior_x_fiducial, prior_x) 
      np.testing.assert_almost_equal(binned_prior_fiducial, binned_prior) 
      np.testing.assert_almost_equal(posterior_x_fiducial, posterior_x) 
      np.testing.assert_allclose(binned_posterior_fiducial, binned_posterior)


   def test_box_plot(self):
      prior = sts.beta(1, 1).rvs(10000, random_state=self.seed)
      posterior = sts.beta(13, 7).rvs(10000, random_state=self.seed)
      fig, ax = plt.subplots(1, 1)

      model_prior_mean_fiducial = 0.5063821553807274
      model_prior_std_fiducial = 0.30147477506418346
      model_post_mean_fiducial = 0.6591207211341557
      model_post_std_fiducial = 0.10121185701290143
      pred_post_mean_fiducial = 0.6627207211341557
      pred_post_std_fiducial = 0.11816936997377958

      model_prior_mean, model_prior_std, model_post_mean, model_post_std, pred_post_mean, pred_post_std = plots.box_plot(ax, prior_preds=prior, posterior_preds=posterior, num_bins=50, exp_obs=13. / (13. + 7.), exp_std=.1, seed = self.seed)

      self.assertEqual(model_prior_mean_fiducial, model_prior_mean)
      self.assertEqual(model_prior_std_fiducial, model_prior_std)
      self.assertEqual(model_post_mean_fiducial, model_post_mean)
      self.assertEqual(model_post_std_fiducial, model_post_std)
      self.assertEqual(pred_post_mean_fiducial, pred_post_mean)
      self.assertEqual(pred_post_std_fiducial, pred_post_std)
    #   assert model_prior_mean_fiducial, model_prior_mean
    #   assert model_prior_std_fiducial == model_prior_std
    #   assert model_post_mean_fiducial == model_post_mean
    #   assert model_post_std_fiducial == model_post_std
    #   assert pred_post_mean_fiducial == pred_post_mean
    #   assert pred_post_std_fiducial == pred_post_std
      
      points = np.linspace(0, 1, 10000)
      weights = sts.beta(13, 7).pdf(points)
      fig, ax = plt.subplots(1, 1)

      model_prior_mean_fiducial = 0.5084
      model_prior_std_fiducial = 0.3068443253508202
      model_post_mean_fiducial = 0.6616
      model_post_std_fiducial = 0.10298271699659123
      pred_post_mean_fiducial = 0.6656
      pred_post_std_fiducial = 0.11805354717245899
      
      model_prior_mean, model_prior_std, model_post_mean, model_post_std, pred_post_mean, pred_post_std = plots.box_plot(ax, prior_preds=points, posterior_wts=weights, num_bins=50, exp_obs=13. / (13. + 7.), exp_std=.1, seed = self.seed)

      self.assertEqual(model_prior_mean_fiducial, model_prior_mean)
      self.assertEqual(model_prior_std_fiducial, model_prior_std)
      self.assertEqual(model_post_mean_fiducial, model_post_mean)
      self.assertEqual(model_post_std_fiducial, model_post_std)
      self.assertEqual(pred_post_mean_fiducial, pred_post_mean)
      self.assertEqual(pred_post_std_fiducial, pred_post_std)
    #   assert model_prior_mean_fiducial == model_prior_mean
    #   assert model_prior_std_fiducial == model_prior_std
    #   assert model_post_mean_fiducial == model_post_mean
    #   assert model_post_std_fiducial == model_post_std
    #   assert pred_post_mean_fiducial == pred_post_mean
    #   assert pred_post_std_fiducial == pred_post_std

   def test_contour_plot(self):
      x_dist = sts.beta(3, 4).rvs(10000, random_state=self.seed)
      y_dist = sts.beta(13, 7).rvs(10000, random_state=self.seed)
      fig, ax = plt.subplots(1, 1)

      X_fiducial = np.array([0.04162977, 0.10399151, 0.16635324, 0.22871497, 0.29107671,
         0.35343844, 0.41580017, 0.4781619 , 0.54052364, 0.60288537,
         0.6652471 , 0.72760883, 0.78997057, 0.8523323 , 0.91469403])

      Y_fiducial = np.array([0.30060288, 0.34478582, 0.38896877, 0.43315171, 0.47733466,
         0.5215176 , 0.56570055, 0.60988349, 0.65406644, 0.69824938,
         0.74243233, 0.78661527, 0.83079822, 0.87498116, 0.91916411])

      Z_fiducial = np.array([[0.03629336, 0.        , 0.03629336, 0.03629336, 0.07258672,
         0.1814668 , 0.1814668 , 0.10888008, 0.36293359, 0.32664023,
         0.29034687, 0.14517344, 0.10888008, 0.10888008, 0.        ],
         [0.        , 0.03629336, 0.10888008, 0.1814668 , 0.32664023,
         0.65328047, 1.59690781, 1.63320117, 1.08880078, 1.41544101,
         1.66949453, 1.1613875 , 0.58069375, 0.21776016, 0.03629336],
         [0.03629336, 0.10888008, 0.25405351, 0.47181367, 0.87104062,
         1.52432109, 2.32277499, 2.50424179, 3.1212289 , 3.66562929,
         2.64941523, 2.1413082 , 0.83474726, 0.29034687, 0.07258672],
         [0.07258672, 0.14517344, 0.21776016, 0.76216054, 1.34285429,
         2.03242812, 3.30269569, 4.60925663, 5.11736366, 5.04477694,
         4.35520311, 2.54053515, 1.19768086, 0.47181367, 0.03629336],
         [0.        , 0.1814668 , 0.29034687, 0.68957383, 1.59690781,
         3.23010898, 4.53666991, 6.2424578 , 7.40384529, 6.67797811,
         4.71813671, 3.59304257, 1.66949453, 0.61698711, 0.14517344],
         [0.10888008, 0.21776016, 0.47181367, 1.1613875 , 2.21389492,
         4.02856288, 4.39149647, 7.2223785 , 8.05712576, 7.51272537,
         5.37141717, 3.59304257, 1.99613476, 0.32664023, 0.        ],
         [0.10888008, 0.03629336, 0.54440039, 1.05250742, 2.10501484,
         3.19381562, 5.37141717, 6.78685818, 8.09341912, 6.71427147,
         5.15365702, 3.52045585, 1.41544101, 0.65328047, 0.10888008],
         [0.        , 0.10888008, 0.68957383, 0.68957383, 2.43165507,
         3.77450936, 5.98840428, 6.27875115, 7.54901873, 5.8795242 ,
         5.80693748, 3.99226952, 1.52432109, 0.65328047, 0.07258672],
         [0.03629336, 0.10888008, 0.43552031, 1.23397422, 1.74208125,
         3.41157577, 4.82701678, 5.69805741, 6.27875115, 5.40771053,
         4.42778983, 3.19381562, 1.45173437, 0.25405351, 0.        ],
         [0.07258672, 0.29034687, 0.14517344, 0.68957383, 1.37914765,
         1.63320117, 3.55674921, 4.46408319, 5.29883045, 5.48029725,
         4.13744296, 2.64941523, 1.45173437, 0.54440039, 0.14517344],
         [0.        , 0.10888008, 0.21776016, 0.65328047, 1.23397422,
         1.66949453, 2.97605546, 3.04864218, 3.70192265, 3.62933593,
         2.7582953 , 1.19768086, 0.7984539 , 0.25405351, 0.03629336],
         [0.03629336, 0.07258672, 0.29034687, 0.43552031, 0.29034687,
         1.27026757, 2.28648163, 1.92354804, 1.74208125, 2.68570859,
         1.48802773, 1.41544101, 0.39922695, 0.14517344, 0.03629336],
         [0.        , 0.        , 0.14517344, 0.10888008, 0.36293359,
         0.61698711, 0.65328047, 1.1613875 , 1.23397422, 1.41544101,
         0.87104062, 0.68957383, 0.1814668 , 0.07258672, 0.        ],
         [0.        , 0.        , 0.07258672, 0.10888008, 0.10888008,
         0.29034687, 0.68957383, 0.58069375, 0.50810703, 0.29034687,
         0.39922695, 0.36293359, 0.29034687, 0.1814668 , 0.        ],
         [0.        , 0.07258672, 0.        , 0.03629336, 0.03629336,
         0.07258672, 0.07258672, 0.07258672, 0.14517344, 0.10888008,
         0.10888008, 0.07258672, 0.10888008, 0.        , 0.        ]])

      _, X, Y, Z = plots.contour_plot(ax, x_dist, y_dist, bins=15)

      np.testing.assert_almost_equal(X_fiducial, X)
      np.testing.assert_almost_equal(Y_fiducial, Y)
      np.testing.assert_almost_equal(Z_fiducial, Z)

      x_weighted = sts.uniform(0, 1).rvs(10000, random_state=self.seed)
      y_weighted = sts.uniform(0, 1).rvs(10000, random_state=self.seed)
      weights = sts.beta(3, 4).pdf(x_weighted) * sts.beta(13, 7).pdf(y_weighted)
      fig, ax = plt.subplots(1, 1)

      X_fiducial = np.array([0.03352468, 0.10016591, 0.16680714, 0.23344837, 0.3000896 ,
         0.36673083, 0.43337206, 0.50001329, 0.56665452, 0.63329575,
         0.69993698, 0.76657821, 0.83321944, 0.89986067, 0.9665019 ])

      Y_fiducial = np.array([0.03352468, 0.10016591, 0.16680714, 0.23344837, 0.3000896 ,
         0.36673083, 0.43337206, 0.50001329, 0.56665452, 0.63329575,
         0.69993698, 0.76657821, 0.83321944, 0.89986067, 0.9665019 ])

      Z_fiducial = np.array([[3.50278224e-10, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 7.07961422e-06, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 1.52849504e-03, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.51316983e-02,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         6.93962434e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 4.29082016e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 1.50112211e+01, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 3.50648822e+01,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         5.59229250e+01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 5.68391395e+01, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 3.76103521e+01, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.68500455e+01,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         2.70617740e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 1.25297819e-01, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 3.04879542e-04]])

      _, X, Y, Z = plots.contour_plot(ax, x_weighted, y_weighted, bins=15, weights=weights)

      np.testing.assert_almost_equal(X_fiducial, X)
      np.testing.assert_almost_equal(Y_fiducial, Y)
      np.testing.assert_almost_equal(Z_fiducial, Z)

   def test_scatter_plot(self):
      x_dist = sts.beta(3, 4).rvs(10000, random_state=self.seed)
      y_dist = sts.beta(13, 7).rvs(10000, random_state=self.seed)
      fig, ax = plt.subplots(1, 1)

      x_ficucial = np.array([0.37862217, 0.6859335 , 0.33606907, 0.48404124, 0.38044844,
         0.74458437, 0.59865158, 0.19064316, 0.35742425, 0.46027005,
         0.48277157, 0.50696647, 0.78543999, 0.45738216, 0.59212409,
         0.30438717, 0.52149957, 0.32236096, 0.62364273, 0.18743716,
         0.46927119, 0.54604885, 0.66616556, 0.44955291, 0.73979625,
         0.75684624, 0.4567985 , 0.42625289, 0.50902773, 0.36651262,
         0.25683939, 0.25236772, 0.2809939 , 0.40946104, 0.33609381,
         0.59397791, 0.30258229, 0.70431503, 0.62175722, 0.43534   ,
         0.60973242, 0.7855358 , 0.45980482, 0.29050867, 0.60461932,
         0.49736132, 0.60852536, 0.35196233, 0.24545609, 0.63360525,
         0.26347286, 0.45696255, 0.49780033, 0.69283991, 0.56878874,
         0.47767467, 0.71870457, 0.67375085, 0.35166343, 0.26704442,
         0.61160237, 0.65260527, 0.53172914, 0.53193304, 0.42218495,
         0.74456292, 0.43252725, 0.53452132, 0.43268064, 0.67850598,
         0.22858163, 0.14195437, 0.85203031, 0.49003453, 0.52325639,
         0.38989216, 0.33690477, 0.27583121, 0.53821194, 0.08341573,
         0.6791739 , 0.67132262, 0.66779748, 0.38197145, 0.4452897 ,
         0.65245712, 0.31245298, 0.25526059, 0.22651958, 0.77792564,
         0.49084143, 0.45007116, 0.37565044, 0.46324089, 0.42322951,
         0.61159062, 0.54607545, 0.71152256, 0.65053118, 0.49409945])

      y_fiducial = np.array([0.56664389, 0.68318328, 0.42162606, 0.62554499, 0.69494023,
         0.73499139, 0.86694675, 0.73537085, 0.6092748 , 0.57189022,
         0.65940756, 0.52475458, 0.56436909, 0.52572692, 0.85534265,
         0.59527935, 0.50475808, 0.53423768, 0.67736659, 0.58571579,
         0.54349065, 0.69108553, 0.74453004, 0.63199094, 0.67201899,
         0.53982029, 0.72953741, 0.53274524, 0.58702159, 0.53422044,
         0.70495296, 0.70801495, 0.74692857, 0.65229178, 0.43456766,
         0.81645521, 0.53602012, 0.55920609, 0.77124128, 0.72735346,
         0.54450582, 0.68880844, 0.68619443, 0.39801921, 0.60268951,
         0.71461588, 0.56696789, 0.79410142, 0.68352464, 0.72086407,
         0.48051819, 0.5579606 , 0.68373654, 0.68574542, 0.57914212,
         0.46000157, 0.62969163, 0.5583628 , 0.63967089, 0.82942423,
         0.63919454, 0.66470999, 0.48606121, 0.58394341, 0.4783885 ,
         0.58127512, 0.73921984, 0.87469726, 0.6859404 , 0.73046471,
         0.46536188, 0.76176956, 0.66193598, 0.58178995, 0.67352814,
         0.63020172, 0.58896584, 0.46182417, 0.46555503, 0.65672975,
         0.71698752, 0.63627117, 0.6712754 , 0.68919403, 0.80886751,
         0.75588466, 0.49596271, 0.5449457 , 0.42130152, 0.80280777,
         0.75447552, 0.72876954, 0.625031  , 0.79771452, 0.68803372,
         0.7678604 , 0.72197765, 0.64360651, 0.65513485, 0.71133594])
      
      x, y = plots.scatter_plot(ax, x_dist, y_dist, num_points=100, seed=self.seed)
      
      np.testing.assert_almost_equal(x_ficucial, x)
      np.testing.assert_almost_equal(y_fiducial, y)


      x_weighted = sts.uniform(0, 1).rvs(10000, random_state=self.seed)
      y_weighted = sts.uniform(0, 1).rvs(10000, random_state=self.seed)
      weights = sts.beta(3, 4).pdf(x_weighted) * sts.beta(13, 7).pdf(y_weighted)
      fig, ax = plt.subplots(1, 1)

      x_ficucial = np.array([0.85834144, 0.68901443, 0.66391744, 0.5314422 , 0.62660003,
         0.50912529, 0.67400992, 0.55848196, 0.51228789, 0.73246965,
         0.63396963, 0.66501574, 0.41967522, 0.56668337, 0.79105488,
         0.63782576, 0.54089498, 0.6574604 , 0.52854719, 0.38061338,
         0.51855063, 0.76401089, 0.56001938, 0.62974449, 0.642472  ,
         0.65398704, 0.4837097 , 0.54680147, 0.5972609 , 0.56937645,
         0.45198995, 0.63257084, 0.37632023, 0.46159118, 0.53955359,
         0.61663092, 0.63970254, 0.4627814 , 0.73352   , 0.60862342,
         0.62274628, 0.70505743, 0.65974426, 0.61519119, 0.54789801,
         0.6200592 , 0.60686963, 0.69902962, 0.73870601, 0.71751151,
         0.61546674, 0.6119385 , 0.65431487, 0.62921137, 0.4214825 ,
         0.51327538, 0.65056291, 0.60422981, 0.54481534, 0.5324245 ,
         0.4769251 , 0.66644129, 0.61689757, 0.5950749 , 0.60355409,
         0.6350746 , 0.52741307, 0.50310957, 0.70443061, 0.55277057,
         0.64349476, 0.72291531, 0.57548798, 0.53475021, 0.53554899,
         0.58561391, 0.49066628, 0.68301937, 0.38063479, 0.56311873,
         0.73498111, 0.72064899, 0.61769901, 0.65056291, 0.55223258,
         0.58217206, 0.70387844, 0.50958841, 0.57999161, 0.56088124,
         0.64118241, 0.72564346, 0.64049743, 0.64662552, 0.7501749 ,
         0.64850456, 0.79537295, 0.53755399, 0.58310187, 0.7076558 ])

      y_fiducial = np.array([0.85834144, 0.68901443, 0.66391744, 0.5314422 , 0.62660003,
         0.50912529, 0.67400992, 0.55848196, 0.51228789, 0.73246965,
         0.63396963, 0.66501574, 0.41967522, 0.56668337, 0.79105488,
         0.63782576, 0.54089498, 0.6574604 , 0.52854719, 0.38061338,
         0.51855063, 0.76401089, 0.56001938, 0.62974449, 0.642472  ,
         0.65398704, 0.4837097 , 0.54680147, 0.5972609 , 0.56937645,
         0.45198995, 0.63257084, 0.37632023, 0.46159118, 0.53955359,
         0.61663092, 0.63970254, 0.4627814 , 0.73352   , 0.60862342,
         0.62274628, 0.70505743, 0.65974426, 0.61519119, 0.54789801,
         0.6200592 , 0.60686963, 0.69902962, 0.73870601, 0.71751151,
         0.61546674, 0.6119385 , 0.65431487, 0.62921137, 0.4214825 ,
         0.51327538, 0.65056291, 0.60422981, 0.54481534, 0.5324245 ,
         0.4769251 , 0.66644129, 0.61689757, 0.5950749 , 0.60355409,
         0.6350746 , 0.52741307, 0.50310957, 0.70443061, 0.55277057,
         0.64349476, 0.72291531, 0.57548798, 0.53475021, 0.53554899,
         0.58561391, 0.49066628, 0.68301937, 0.38063479, 0.56311873,
         0.73498111, 0.72064899, 0.61769901, 0.65056291, 0.55223258,
         0.58217206, 0.70387844, 0.50958841, 0.57999161, 0.56088124,
         0.64118241, 0.72564346, 0.64049743, 0.64662552, 0.7501749 ,
         0.64850456, 0.79537295, 0.53755399, 0.58310187, 0.7076558 ])

      x, y = plots.scatter_plot(ax, x_weighted, y_weighted, num_points=100, weights=weights, seed=self.seed)

      np.testing.assert_almost_equal(x_ficucial, x)
      np.testing.assert_almost_equal(y_fiducial, y)

if __name__ == '__main__':
    unittest.main()
